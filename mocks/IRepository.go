// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	repositories "github.com/katakeda/boardhop-api-service-go/repositories"
	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, payload
func (_m *IRepository) CreatePost(ctx context.Context, payload repositories.CreatePostPayload) (*repositories.Post, error) {
	ret := _m.Called(ctx, payload)

	var r0 *repositories.Post
	if rf, ok := ret.Get(0).(func(context.Context, repositories.CreatePostPayload) *repositories.Post); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repositories.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repositories.CreatePostPayload) error); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCategories provides a mock function with given fields:
func (_m *IRepository) GetCategories() ([]repositories.Category, error) {
	ret := _m.Called()

	var r0 []repositories.Category
	if rf, ok := ret.Get(0).(func() []repositories.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: ctx, id
func (_m *IRepository) GetPost(ctx context.Context, id string) (*repositories.Post, error) {
	ret := _m.Called(ctx, id)

	var r0 *repositories.Post
	if rf, ok := ret.Get(0).(func(context.Context, string) *repositories.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repositories.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: ctx, params
func (_m *IRepository) GetPosts(ctx context.Context, params url.Values) ([]repositories.Post, error) {
	ret := _m.Called(ctx, params)

	var r0 []repositories.Post
	if rf, ok := ret.Get(0).(func(context.Context, url.Values) []repositories.Post); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repositories.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, url.Values) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
